    interface Human {
        name: String
    }


    type Attendee implements Human {
        id: ID!
        name: String
     }

     type Speaker implements Human {
        id: ID!
        name: String
        twitter: String
        rate: Rate
     }

     type Talk {
          id: ID!
          title: String
    #Here is the docs for Talk. You can read about the Talk and its details.
          description: String
          speakers: [Speaker]
     }

     union All = Speaker | Talk

    input SpeakerInput {
        name: String
        twitter: String
        rate: Rate
    }

    type Score {
        title: String
        score: Int
        isNice: Boolean
    }

     type Subscription {
        scores(title: String, nice: Boolean) : Score
     }

     type Mutation {
        addSpeaker(speaker: SpeakerInput) : Speaker
     }

     enum Rate{
        NORMAL
        GOOD
        FINE
     }

     type Query {
             allTalks: [Talk]
             allAttendees: [Attendee]
             allSpeakers: [Speaker]
             allAll: [All]
             allHumans: [Human]
     }

     schema {
       query: Query
       mutation: Mutation
       subscription: Subscription
     }